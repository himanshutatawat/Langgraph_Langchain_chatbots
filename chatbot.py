# -*- coding: utf-8 -*-
"""Chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10ntvbLec2IuXGYkzsQj3OCku_xEl8nGA

Chatbot with langgraph
"""

!pip install langgraph langchain

!pip install langchain langchain_groq langsmith langchain_community

from google.colab import userdata
groq_api_key = userdata.get('GROQ_API_KEY')

langsmith = userdata.get('LANGCHAIN_API_KEY')

import os
os.environ["LANGCHAIN_TRACING_V2"] = "true"
os.environ["LANGCHAIN_PROJECT"] = "LANGGRAPH_CHATBOT"
os.environ["LANGCHAIN_API_KEY"] = langsmith

from langchain_groq import ChatGroq

llm = ChatGroq(groq_api_key=groq_api_key, model_name = "Gemma2-9b-It")

llm

"""## Start Building chatbot with Langgraph

"""

from typing import Annotated
from typing_extensions import TypedDict
from langgraph.graph import StateGraph,START, END
from langgraph.graph.message import add_messages

class State(TypedDict):
  ''' "Messages have the type "list". The 'add_messages' function in the annotation defines how this state key should be updated (in this case, it appends messages to the list, rather than overwriting them)'''
  messages: Annotated[list, add_messages]

graph_builder = StateGraph(State)

def chatbot(state:State):
  return {"messages":llm.invoke(state['messages'])}

graph_builder.add_node("chatbot", chatbot)

graph_builder

graph_builder.add_edge(START,"chatbot")
graph_builder.add_edge("chatbot",END)

from IPython.display import display, Image

graph = graph_builder.compile()  # Compile the graph

try:
    display(Image(graph.get_graph().draw_mermaid_png()))
except Exception as e:
    print(f"Error displaying graph: {e}")

while True:
  user_input = input("User: ")
  if user_input.lower() in ["quit","q"]:
    print("Good Bye")
    break

  for event in graph.stream({'messages':("user",user_input)}):
    print(event.values())
    for value in event.values():
      print(value['messages'])
      print("Assistant", value["messages"].content)

